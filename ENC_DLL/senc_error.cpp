#include "senc_error.h"
#include "senc_assist.h"
#include "senc_logger.h"
#include "senc_cmd_frame.h"


//返回包状态码查验
unsigned int SencErrCheck(unsigned char *Buf){
	unsigned int StateCode;
	StateCode=(*Buf<<8)|*(Buf+1);
	switch (StateCode)
	{
	case SENC_CMD_STATECODE_SUCCUSS:
		return SENC_SUCCESS;

	case SENC_CMD_STATECODE_USB_DEVICE_BUSY:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_USB_DEVICE_BUSY;
	case SENC_CMD_STATECODE_USB_DATA_SENDING_FAIL:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_USB_DATA_SENDING_FAIL;
	case SENC_CMD_STATECODE_PROTOCOL_HEAD_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_HEAD_ERROR;
	case SENC_CMD_STATECODE_PROTOCOL_LENGTH_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_LENGTH_ERROR;
	case SENC_CMD_STATECODE_PROTOCOL_CMD_TYPE_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_CMD_TYPE_ERROR;
	case SENC_CMD_STATECODE_PROTOCOL_MAC_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_MAC_ERROR;
	case SENC_CMD_STATECODE_PROTOCOL_OP_TYPE_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_OP_TYPE_ERROR;
	case SENC_CMD_STATECODE_PROTOCOL_SECURE_SIGN_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_SECURE_SIGN_ERROR;
	case SENC_CMD_STATECODE_CARD_STATE_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_CARD_STATE_ERROR;
	case SENC_CMD_STATECODE_WRITE_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_WRITE_ERROR;
	case SENC_CMD_STATECODE_READ_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_READ_ERROR;
	case SENC_CMD_STATECODE_SESSION_KEY_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_SESSION_KEY_ERROR;
	case SENC_CMD_STATECODE_PROTOCOL_ATTRIBUTE_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_PROTOCOL_ATTRIBUTE_ERROR;

	case SENC_CMD_STATECODE_ALGORITHM_RANDOM_NUM_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_ALGORITHM_RANDOM_NUM_ERROR;
	case SENC_CMD_STATECODE_ALGORITHM_AES_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_ALGORITHM_AES_ERROR;
	case SENC_CMD_STATECODE_ALGORITHM_RSA_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_ALGORITHM_RSA_ERROR;
	case SENC_CMD_STATECODE_ALGORITHM_DES_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_ALGORITHM_DES_ERROR;

	case SENC_CMD_STATECODE_IC_CARD_NOT_EXIST:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_IC_CARD_NOT_EXIST;
	case SENC_CMD_STATECODE_IC_CARD_VERIFIED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_IC_CARD_VERIFIED;


	case SENC_CMD_STATECODE_MASTER_CARD_NOT_ADDED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_MASTER_CARD_NOT_ADDED;
	case SENC_CMD_STATECODE_MASTER_CARD_FULL:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_MASTER_CARD_FULL;
	case SENC_CMD_STATECODE_MASTER_CARD_NOT_EXIST:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_MASTER_CARD_NOT_EXIST;
	case SENC_CMD_STATECODE_MASTER_CARD_VERIFY_FAILED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_MASTER_CARD_VERIFY_FAILED;
	case SENC_CMD_STATECODE_MASTER_CARD_VERIFIED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_MASTER_CARD_VERIFIED;
	case SENC_CMD_STATECODE_MASTER_CARD_ADDED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_MASTER_CARD_ADDED;

	case SENC_CMD_STATECODE_DONGLE_EXISTED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_DONGLE_EXISTED;
	case SENC_CMD_STATECODE_DONGLE_NOT_EXIST:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_DONGLE_NOT_EXIST;
	case SENC_CMD_STATECODE_DONGLE_ID_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_DONGLE_ID_ERROR;
	case SENC_CMD_STATECODE_DONGLE_VERIFY_FAILED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_DONGLE_VERIFY_FAILED;

	case SENC_CMD_STATECODE_KEY_INDEX_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_KEY_INDEX_ERROR;
	case SENC_CMD_STATECODE_KEY_ALG_TYPE_ERROR:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_KEY_ALG_TYPE_ERROR;
	case SENC_CMD_STATECODE_KEY_NOT_EXIST:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_KEY_NOT_EXIST;
	case SENC_CMD_STATECODE_KEY_EXISTED:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_KEY_EXISTED;
	case SENC_CMD_STATECODE_KEY_STORAGE_FULL:
		return SENC_ERROR_ECARDS|SENC_CMD_STATECODE_KEY_STORAGE_FULL;
	default:
		return SENC_ERROR_ECARDS|StateCode;
	}
}


//加密卡返回包查验
unsigned int SencRetCheck(unsigned char *Buf, unsigned int *ReceiveLength, unsigned int CheckCode){
	// 	unsigned int len;
	if(Buf[0]!=SENC_CMD_CONFIRM)				//返回头
		return SENC_ERROR_RECEIVED_CONFIRM_FAIL;

	*ReceiveLength=(Buf[1]<<8)|Buf[2];			//长度

	if(ErrCheck(Buf+3)!=SENC_CMD_SUCCESS)		//状态
		return ErrCheck(Buf+3);

	if(Buf[5]!=CheckCode)						//命令类型
		return SENC_ERROR_WRONG_CMD_TYPE;

	return SENC_SUCCESS;
}

//LIBUSB错误返回辅助函数
int SencUsbErrorCheck(int cc){
	int iRet;
	switch (cc)
	{
	case 0: iRet = SENC_SUCCESS;break;
	case -1: iRet = SENC_ERROR_USB_IO;break;
	case -2: iRet = SENC_ERROR_USB_INVALID_PARAM;break;
	case -3: iRet = SENC_ERROR_USB_ACCESS_DENY;break;
	case -4: iRet = SENC_ERROR_USB_NO_DEVICE;break;
	case -5: iRet = SENC_ERROR_USB_NOT_FOUND;break;
	case -6: iRet = SENC_ERROR_USB_BUSY;break;
	case -7: iRet = SENC_ERROR_USB_TIMEOUT;break;
	case -8: iRet = SENC_ERROR_USB_OVERFLOW;break;
	case -9: iRet = SENC_ERROR_USB_PIPE;break;
	case -10: iRet = SENC_ERROR_USB_INTERRUPTED;break;
	case -11: iRet = SENC_ERROR_USB_NO_MEMORY;break;
	case -12: iRet = SENC_ERROR_USB_NOT_SUPPORTED;break;
	default: iRet = cc;
	}
// 	Log_IndefinitedMsg(SENC_LOG_LEVEL_ERROR);

	return iRet;
}


unsigned int ErrorLog(unsigned int ErrCode,char* tag,char* file, int line ){
	Log_IndefinitedMsg(SENC_LOG_LEVEL_ERROR,tag,file,line,"42","ErrorCode",ErrCode);
	return ErrCode;
}